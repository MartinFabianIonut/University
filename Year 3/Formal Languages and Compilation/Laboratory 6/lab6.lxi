%{
#include <stdio.h>
#include "attrib.h"
#include "lab6.tab.h"
#include <string.h> /* for strcpy */



extern int lineNumber;
extern int errorFound;

%}

%option noyywrap

INTEGER      [+-]?((0[bB][01]+(u|U|l|L|z|Z|uz|uZ|Uz|UZ|zu|zU|Zu|ZU|ul|uL|Ul|UL|lu|lU|Lu|LU|ll|lL|Ll|LL|llu|llU|lLu|lLU|Llu|LLu|LLU|ull|ulL|uLl|uLL|Ull|UlL|ULl|ULL)?)|(0[0-7]+(u|U|l|L|z|Z|uz|uZ|Uz|UZ|zu|zU|Zu|ZU|ul|uL|Ul|UL|lu|lU|Lu|LU|ll|lL|Ll|LL|llu|llU|lLu|lLU|Llu|LLu|LLU|ull|ulL|uLl|uLL|Ull|UlL|ULl|ULL)?)|(0[xX][0-9a-fA-F]+(u|U|l|L|z|Z|uz|uZ|Uz|UZ|zu|zU|Zu|ZU|ul|uL|Ul|UL|lu|lU|Lu|LU|ll|lL|Ll|LL|llu|llU|lLu|lLU|Llu|LLu|LLU|ull|ulL|uLl|uLL|Ull|UlL|ULl|ULL)?)|([1-9][0-9]*(u|U|l|L|z|Z|uz|uZ|Uz|UZ|zu|zU|Zu|ZU|ul|uL|Ul|UL|lu|lU|Lu|LU|ll|lL|Ll|LL|llu|llU|lLu|lLU|Llu|LLu|LLU|ull|ulL|uLl|uLL|Ull|UlL|ULl|ULL)?)|(0(u|U|l|L|z|Z|uz|uZ|Uz|UZ|zu|zU|Zu|ZU|ul|uL|Ul|UL|lu|lU|Lu|LU|ll|lL|Ll|LL|llu|llU|lLu|lLU|Llu|LLu|LLU|ull|ulL|uLl|uLL|Ull|UlL|ULl|ULL)?))
REAL_NUMBER  [+-]?((0(l|f|f16|f32|f64|f128|bf16|L|F|F16|F32|F64|F128|BF16)?|[1-9][0-9]*)(\.[0-9]+)?([eE][+-]?[0-9]+)?(l|f|f16|f32|f64|f128|bf16|L|F|F16|F32|F64|F128|BF16)?|([0-9]+\.[0-9]*)([eE][+-]?[0-9]+)?(l|f|f16|f32|f64|f128|bf16|L|F|F16|F32|F64|F128|BF16)?)
IDENTIFIER   [a-zA-Z_][a-zA-Z0-9_]{0,249}  
STRING       \".*\"
HEADER       <[^>\n]*>

%%

"if"        { /*printf("%s\n", yytext);*/ return IF; }
"while"     { /*printf("%s\n", yytext);*/ return WHILE; }
"for"       { /*printf("%s\n", yytext);*/ return FOR; }
"do"        { /*printf("%s\n", yytext);*/ return DO; }
"int"       { /*printf("%s INT\n", yytext);*/ return INT; }
"double"    { /*printf("%s DOULBE\n", yytext);*/ return DOUBLE; }
"struct"    { /*printf("%s\n", yytext);*/ return STRUCT; }
"void"      { /*printf("%s VOID\n", yytext);*/ return VOID; }
"return"    { /*printf("%s\n", yytext);*/ return RETURN; }
"cout"      { /*printf("%s\n", yytext);*/ return COUT; }
"cin"       { /*printf("%s\n", yytext);*/ return CIN; }
"endl"      { /*printf("%s\n", yytext);*/ return ENDL; }
"'\\n'"     { /*printf("%s\n", yytext);*/ return ENDL; }
"\"\\n\""   { /*printf("%s\n", yytext);*/ return ENDL; }
"#include"  { /*printf("%s\n", yytext);*/ return INCLUDE_CPP; }
"using namespace std"     { /*printf("%s\n", yytext);*/ return USING; }
";"         { /*printf("%s\n", yytext);*/ return SEMICOLON; }
","         { /*printf("%s\n", yytext);*/ return COMMA; }
"("         { /*printf("%s\n", yytext);*/ return OPEN_PAR;}
")"         { /*printf("%s\n", yytext);*/ return CLOSE_PAR; }
"{"         { /*printf("%s\n", yytext);*/ return OPEN_BRACE; }
"}"         { /*printf("%s\n", yytext);*/ return CLOSE_BRACE; }
"="         { /*printf("%s\n", yytext);*/ return ASSIGN; }
"=="        { /*printf("%s\n", yytext);*/ return EQ; }
"!="        { /*printf("%s\n", yytext);*/ return NEQ; }
"<"         { /*printf("%s\n", yytext);*/ return LT; }
"<="        { /*printf("%s\n", yytext);*/ return LE; }
">"         { /*printf("%s\n", yytext);*/ return GT; }
">="        { /*printf("%s\n", yytext);*/ return GE; }
"+"         { /*printf("%s\n", yytext);*/ return PLUS; }
"*"         { /*printf("%s\n", yytext);*/ return TIMES; }
"%"         { /*printf("%s\n", yytext);*/ return MOD; }
"/"         { /*printf("%s\n", yytext);*/ return DIV; }
"&&"        { /*printf("%s\n", yytext);*/ return AND; }
"||"        { /*printf("%s\n", yytext);*/ return OR; }
"!"         { /*printf("%s\n", yytext);*/ return NOT; }
"<<"        { /*printf("%s\n", yytext);*/ return SHIFT_LEFT; }
">>"        { /*printf("%s\n", yytext);*/ return SHIFT_RIGHT; }
"."         { /*printf("%s\n", yytext);*/ return DOT; }

{IDENTIFIER}    {
                         strcpy(yylval.varname, "[");
                         strcat(yylval.varname, yytext);
                         strcat(yylval.varname, "]");
                         return ID;
                       }
{INTEGER}       {strcpy(yylval.varname,yytext);    
                        return CONST;
                        }
{REAL_NUMBER}   {strcpy(yylval.varname,yytext);    
                        return CONST;
                        }
{STRING}        { /*printf("%s\n", yytext);*/ return CONST; }
{HEADER}        { /*printf("%s\n", yytext);*/ return HEADER_CPP; }
[^ \t\n;]{251,} { printf("Lexical error - identifier is too long at line %d: %s\n", lineNumber, yytext); errorFound = 1; return ID; }
"{"[^}\n]*"}"   { /*printf("%s\n", yytext); */}
[ \t]+          
[\n]      { /*printf("New line\n"); */lineNumber++; }
.            { printf("Lexical error at line %d: %s\n", lineNumber, yytext); errorFound = 1; }
%%

