package com.example.items.core.data.remoteimport com.google.gson.GsonBuilderimport com.google.gson.JsonDeserializerimport okhttp3.OkHttpClientimport retrofit2.Retrofitimport retrofit2.converter.gson.GsonConverterFactoryimport java.util.Dateimport com.google.gson.JsonDeserializationContextimport com.google.gson.JsonElementimport java.lang.reflect.Typeimport java.text.ParseExceptionimport java.text.SimpleDateFormatimport java.util.*object Api {    private const val url = "10.0.2.2:3000"    private const val httpUrl = "http://$url/"    const val wsUrl = "ws://$url"    private var gson = GsonBuilder().registerTypeAdapter(Date::class.java, object :        JsonDeserializer<Date> {        override fun deserialize(            json: JsonElement?,            typeOfT: Type?,            context: JsonDeserializationContext?        ): Date {            val dateString = json?.asString            val dateFormat = SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss.SSS'Z'", Locale.getDefault())            try {                return dateFormat.parse(dateString)            } catch (e: ParseException) {                throw RuntimeException("Error parsing date", e)            }        }    }).create()    val tokenInterceptor = TokenInterceptor()    val okHttpClient = OkHttpClient.Builder().apply {        this.addInterceptor(tokenInterceptor)    }.build()    val retrofit: Retrofit = Retrofit.Builder()        .baseUrl(httpUrl)        .addConverterFactory(GsonConverterFactory.create(gson))        .build()}